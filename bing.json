/*
Bing积分完整优化版 v4.0
整合lowking和mcdasheng脚本优点
支持PC端、移动端、Edge端搜索 + 积分任务
*/

const $ = new Toolkit("Bing积分优化版", "BingPoint", {
  httpApi: "ffff@10.0.0.19:6166"
});

// BoxJS配置键名
const CONFIG = {
  // 基础配置
  RESET_HOURS: 'bingResetHours',
  SCRIPT_TIMEOUT: 'bingScriptTimeout',
  
  // Cookie配置
  POINT_COOKIE: 'bingPointCookie',
  PC_COOKIE: 'bingSearchCookiePC', 
  MOBILE_COOKIE: 'bingSearchCookieMobile',
  
  // 搜索次数配置
  PC_SEARCH_COUNT: 'bingPcSearchCount',
  MOBILE_SEARCH_COUNT: 'bingMobileSearchCount',
  EDGE_SEARCH_COUNT: 'bingEdgeSearchCount',
  
  // 高级配置
  USE_CN_DOMAIN: 'bingUseCnDomain',
  SEARCH_INTERVAL: 'bingSearchInterval',
  ENABLE_DEBUG: 'bingEnableDebug'
};

const scriptTimeout = $.getVal(CONFIG.SCRIPT_TIMEOUT) || 30;

// 从BoxJS读取配置
const config = {
  resetHours: $.getVal(CONFIG.RESET_HOURS) || 8,
  pointCookie: $.getVal(CONFIG.POINT_COOKIE),
  pcCookie: $.getVal(CONFIG.PC_COOKIE),
  mobileCookie: $.getVal(CONFIG.MOBILE_COOKIE),
  pcSearchCount: $.getVal(CONFIG.PC_SEARCH_COUNT) || 30,
  mobileSearchCount: $.getVal(CONFIG.MOBILE_SEARCH_COUNT) || 20,
  edgeSearchCount: $.getVal(CONFIG.EDGE_SEARCH_COUNT) || 10,
  useCnDomain: $.getVal(CONFIG.USE_CN_DOMAIN) !== "false",
  searchInterval: $.getVal(CONFIG.SEARCH_INTERVAL) || 5,
  enableDebug: $.getVal(CONFIG.ENABLE_DEBUG) === "true"
};

// 状态记录
const STATE = {
  LAST_EXEC_DATE: 'bingLastExecDate',
  PC_SEARCH_TODAY: 'bingPcSearchToday',
  MOBILE_SEARCH_TODAY: 'bingMobileSearchToday', 
  EDGE_SEARCH_TODAY: 'bingEdgeSearchToday',
  CACHE_POINTS: 'bingCachePoints'
};

let todayString = $.formatDate(new Date(), 'yyyyMMdd');
let searchState = {
  pc: {
    count: $.getVal(STATE.PC_SEARCH_TODAY) || 0,
    total: config.pcSearchCount
  },
  mobile: {
    count: $.getVal(STATE.MOBILE_SEARCH_TODAY) || 0, 
    total: config.mobileSearchCount
  },
  edge: {
    count: $.getVal(STATE.EDGE_SEARCH_TODAY) || 0,
    total: config.edgeSearchCount
  }
};

// 主执行函数
if (!$.isExecComm) {
  if ($.isRequest()) {
    getCookie();
    $.done();
  } else {
    setupBoxJS();
    executeBingTasks();
  }
}

function setupBoxJS() {
  $.boxJsJsonBuilder({
    "icons": [
      "https://raw.githubusercontent.com/lowking/Scripts/master/doc/icon/bingPoint.png",
      "https://raw.githubusercontent.com/lowking/Scripts/master/doc/icon/bingPoint.png"
    ],
    "settings": [
      // 基础设置
      {
        "id": CONFIG.RESET_HOURS,
        "name": "每日任务重置时间(小时)",
        "val": 8,
        "type": "number",
        "desc": "设置每天几点重置任务，24小时制"
      },
      {
        "id": CONFIG.USE_CN_DOMAIN,
        "name": "使用国区域名",
        "val": true,
        "type": "boolean", 
        "desc": "开启使用cn.bing.com，关闭使用www.bing.com"
      },
      
      // Cookie配置
      {
        "id": CONFIG.POINT_COOKIE,
        "name": "Bing积分Cookie",
        "val": "",
        "type": "text",
        "desc": "访问rewards.bing.com获取的Cookie"
      },
      {
        "id": CONFIG.PC_COOKIE,
        "name": "PC端搜索Cookie",
        "val": "",
        "type": "text",
        "desc": "在PC浏览器访问bing.com获取的Cookie"
      },
      {
        "id": CONFIG.MOBILE_COOKIE, 
        "name": "移动端搜索Cookie",
        "val": "",
        "type": "text",
        "desc": "在手机浏览器访问bing.com获取的Cookie"
      },
      
      // 搜索次数配置
      {
        "id": CONFIG.PC_SEARCH_COUNT,
        "name": "PC端搜索次数",
        "val": 30,
        "type": "number",
        "desc": "PC端每日搜索次数，建议30次"
      },
      {
        "id": CONFIG.MOBILE_SEARCH_COUNT,
        "name": "移动端搜索次数", 
        "val": 20,
        "type": "number",
        "desc": "移动端每日搜索次数，建议20次"
      },
      {
        "id": CONFIG.EDGE_SEARCH_COUNT,
        "name": "Edge端搜索次数",
        "val": 10,
        "type": "number",
        "desc": "Edge浏览器搜索次数"
      },
      
      // 高级设置
      {
        "id": CONFIG.SEARCH_INTERVAL,
        "name": "搜索间隔(秒)",
        "val": 5,
        "type": "number",
        "desc": "每次搜索之间的间隔时间"
      },
      {
        "id": CONFIG.SCRIPT_TIMEOUT,
        "name": "脚本超时时间(秒)",
        "val": 30,
        "type": "number",
        "desc": "脚本执行最大时间"
      },
      {
        "id": CONFIG.ENABLE_DEBUG,
        "name": "开启调试日志",
        "val": false,
        "type": "boolean",
        "desc": "显示详细执行日志"
      }
    ],
    "keys": [CONFIG.POINT_COOKIE],
    "script_timeout": scriptTimeout
  }, {
    "script_url": "https://github.com/lowking/Scripts/blob/master/bing/bingPoint.js",
    "author": "@lowking & @mcdasheng",
    "repo": "https://github.com/lowking/Scripts",
  });
}

async function executeBingTasks() {
  if (!checkResetCondition()) {
    $.log("⏰ 今日任务已完成，跳过执行");
    await showCurrentPoints();
    return;
  }
  
  $.log("🎯 开始执行Bing积分任务");
  
  let totalPoints = 0;
  let taskResults = {
    points: 0,
    pc: 0, 
    mobile: 0,
    edge: 0
  };
  
  // 执行积分任务
  if (config.pointCookie) {
    $.log("\n📋 开始积分任务...");
    taskResults.points = await executePointTasks();
    totalPoints += taskResults.points;
  }
  
  // 执行搜索任务
  if (config.pcCookie) {
    $.log("\n💻 开始PC端搜索...");
    taskResults.pc = await executeSearch('pc');
    totalPoints += taskResults.pc;
  }
  
  if (config.mobileCookie) {
    $.log("\n📱 开始移动端搜索...");
    taskResults.mobile = await executeSearch('mobile');
    totalPoints += taskResults.mobile;
  }
  
  if (config.pcCookie) {
    $.log("\n🔵 开始Edge端搜索...");
    taskResults.edge = await executeSearch('edge');
    totalPoints += taskResults.edge;
  }
  
  // 保存状态和显示结果
  saveExecutionState();
  await showFinalResults(taskResults, totalPoints);
}

function checkResetCondition() {
  const now = new Date();
  const currentHour = now.getHours();
  const lastExecDate = $.getVal(STATE.LAST_EXEC_DATE);
  
  // 如果是重置时间后且今天未执行过
  if (currentHour >= config.resetHours && lastExecDate !== todayString) {
    $.log("🔄 检测到重置时间，清除昨日状态");
    resetDailyState();
    return true;
  }
  
  // 如果今天已经执行过
  if (lastExecDate === todayString) {
    return false;
  }
  
  // 首次执行或新的一天
  return true;
}

function resetDailyState() {
  $.setVal("0", STATE.PC_SEARCH_TODAY);
  $.setVal("0", STATE.MOBILE_SEARCH_TODAY);
  $.setVal("0", STATE.EDGE_SEARCH_TODAY);
}

function saveExecutionState() {
  $.setVal(todayString, STATE.LAST_EXEC_DATE);
  $.setVal(searchState.pc.count.toString(), STATE.PC_SEARCH_TODAY);
  $.setVal(searchState.mobile.count.toString(), STATE.MOBILE_SEARCH_TODAY);
  $.setVal(searchState.edge.count.toString(), STATE.EDGE_SEARCH_TODAY);
}

async function executePointTasks() {
  let earnedPoints = 0;
  
  try {
    const dashboard = await getDashboard();
    if (!dashboard?.dashboard) {
      $.log("❌ 无法获取积分面板");
      return 0;
    }
    
    const tasks = getAvailableTasks(dashboard);
    $.log(`📋 发现 ${tasks.length} 个可用任务`);
    
    for (const task of tasks) {
      const result = await processTask(task, dashboard.rvt);
      if (result.success) {
        earnedPoints += result.points;
        $.log(`✅ 完成任务: ${task.title} +${result.points}分`);
      }
      await $.sleep(2000 + Math.random() * 2000);
    }
  } catch (e) {
    $.log("❌ 积分任务执行失败:", e);
  }
  
  return earnedPoints;
}

function getAvailableTasks(dashboard) {
  const tasks = [];
  const promotions = [...(dashboard.dashboard.morePromotions || [])];
  
  if (dashboard.dashboard.promotionalItem) {
    promotions.push(dashboard.dashboard.promotionalItem);
  }
  
  for (const task of promotions) {
    if (task.complete === false && task.pointProgressMax > 0) {
      tasks.push({
        title: task.attributes?.title || "未知任务",
        points: task.pointProgressMax,
        type: task.attributes?.type,
        name: task.name,
        hash: task.hash
      });
    }
  }
  
  return tasks;
}

async function processTask(task, rvt) {
  if (task.type === "urlreward") {
    const success = await reportActivity(task, rvt);
    return {
      success: success,
      points: success ? task.points : 0
    };
  }
  
  $.log(`⏭️ 跳过任务类型: ${task.type}`);
  return { success: false, points: 0 };
}

async function executeSearch(deviceType) {
  const state = searchState[deviceType];
  if (state.count >= state.total) {
    $.log(`✅ ${getDeviceName(deviceType)}搜索已完成`);
    return 0;
  }
  
  const remaining = state.total - state.count;
  $.log(`🔍 开始${getDeviceName(deviceType)}搜索，剩余${remaining}次`);
  
  let successCount = 0;
  
  for (let i = 0; i < remaining; i++) {
    const success = await performSingleSearch(deviceType, state.count + i + 1);
    if (success) {
      successCount++;
      state.count++;
    }
    
    if (i < remaining - 1) {
      await $.sleep(config.searchInterval * 1000);
    }
  }
  
  const pointsEarned = Math.floor(successCount / 3) * 8; // 估算积分
  $.log(`🎉 ${getDeviceName(deviceType)}搜索完成: 成功${successCount}次，获得约${pointsEarned}分`);
  
  return pointsEarned;
}

function getDeviceName(deviceType) {
  const names = {
    'pc': 'PC端',
    'mobile': '移动端', 
    'edge': 'Edge端'
  };
  return names[deviceType] || deviceType;
}

async function performSingleSearch(deviceType, round) {
  const baseUrl = config.useCnDomain ? "https://cn.bing.com" : "https://www.bing.com";
  const randomWord = generateSearchKeyword();
  const searchUrl = `${baseUrl}/search?q=${encodeURIComponent(randomWord)}&form=QBLH&qs=n`;
  
  const headers = getSearchHeaders(deviceType);
  
  try {
    const response = await $.http.get({
      url: searchUrl,
      headers: headers,
      timeout: 10000
    });
    
    if (response.status === 200) {
      if (config.enableDebug) {
        $.log(`✅ ${getDeviceName(deviceType)}第${round}次搜索成功`);
      }
      return true;
    } else {
      $.log(`❌ ${getDeviceName(deviceType)}搜索失败，状态码: ${response.status}`);
      return false;
    }
  } catch (error) {
    $.log(`💥 ${getDeviceName(deviceType)}搜索异常: ${error.message}`);
    return false;
  }
}

function getSearchHeaders(deviceType) {
  const baseHeaders = {
    "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
    "accept-language": "zh-CN,zh;q=0.9,en;q=0.8",
    "cache-control": "no-cache",
    "pragma": "no-cache"
  };
  
  const deviceConfigs = {
    'pc': {
      "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
      "cookie": config.pcCookie
    },
    'mobile': {
      "user-agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.3 Mobile/15E148 Safari/604.1",
      "cookie": config.mobileCookie
    },
    'edge': {
      "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0",
      "cookie": config.pcCookie
    }
  };
  
  return { ...baseHeaders, ...deviceConfigs[deviceType] };
}

function generateSearchKeyword() {
  const prefixes = ['什么是', '如何', '为什么', '最好的', '最新的', '学习', '了解'];
  const topics = ['人工智能', '机器学习', '编程', '科技', '健康', '旅游', '美食', '音乐'];
  const suffixes = ['的方法', '的技巧', '的原理', '的发展', '的应用'];
  
  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
  const topic = topics[Math.floor(Math.random() * topics.length)];
  const suffix = Math.random() > 0.5 ? suffixes[Math.floor(Math.random() * suffixes.length)] : '';
  const randomNum = Math.floor(Math.random() * 1000);
  
  return `${prefix}${topic}${suffix} ${randomNum}`;
}

async function getDashboard() {
  if (!config.pointCookie) return null;
  
  const headers = {
    "authority": 'rewards.bing.com',
    "accept": 'application/json, text/javascript, */*; q=0.01',
    "cookie": config.pointCookie,
    "user-agent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
  };
  
  try {
    const response = await $.http.get({
      url: `https://rewards.bing.com/?_=${Date.now()}`,
      headers: headers
    });
    
    if (response.status === 200) {
      const data = response.body;
      const rvtMatch = data.match(/__RequestVerificationToken.*?value="([^"]*)"/);
      const dashboardMatch = data.match(/var dashboard = ({[^;]*});/);
      
      if (rvtMatch && dashboardMatch) {
        return {
          dashboard: JSON.parse(dashboardMatch[1]),
          rvt: rvtMatch[1]
        };
      }
    }
  } catch (e) {
    $.log("❌ 获取积分面板失败");
  }
  
  return null;
}

async function reportActivity(task, rvt) {
  const headers = {
    "authority": 'rewards.bing.com',
    "content-type": 'application/x-www-form-urlencoded',
    "cookie": config.pointCookie,
    "x-requested-with": 'XMLHttpRequest'
  };
  
  const body = `id=${task.name}&hash=${task.hash}&timeZone=480&activityAmount=1&__RequestVerificationToken=${rvt}`;
  
  try {
    const response = await $.http.post({
      url: `https://rewards.bing.com/api/reportactivity?_=${Date.now()}`,
      headers: headers,
      body: body
    });
    
    return response.status === 200;
  } catch (e) {
    return false;
  }
}

async function showCurrentPoints() {
  const dashboard = await getDashboard();
  if (dashboard?.dashboard) {
    const points = dashboard.dashboard.userStatus?.availablePoints || "未知";
    $.msg(
      "Bing积分状态",
      `当前积分: ${points}`,
      "今日任务已完成"
    );
  }
}

async function showFinalResults(results, totalPoints) {
  const dashboard = await getDashboard();
  const currentPoints = dashboard?.dashboard?.userStatus?.availablePoints || "未知";
  
  $.setVal(currentPoints, STATE.CACHE_POINTS);
  
  const message = `
任务积分: ${results.points}分
PC搜索: ${results.pc}分  
移动搜索: ${results.mobile}分
Edge搜索: ${results.edge}分
总计获得: ${totalPoints}分
当前积分: ${currentPoints}
  `.trim();
  
  $.msg("Bing积分任务完成", message);
}

function getCookie() {
  if ($.isMatch(/\/rewards\.bing\.com/)) {
    $.log("🍪 开始获取Cookie");
    try {
      const cookieHeader = $request.headers?.Cookie || $request.headers?.cookie;
      if (cookieHeader) {
        $.setVal(CONFIG.POINT_COOKIE, cookieHeader);
        $.appendNotifyInfo('✅ 成功获取积分Cookie');
      }
    } catch (e) {
      $.appendNotifyInfo('❌ 获取Cookie失败');
    }
  }
}

// 简化的Toolkit类实现
function Toolkit(name, id, options) {
  return new class {
    constructor(name, id, options) {
      this.name = name;
      this.id = id;
      this.options = options || {};
      this.logs = [];
      this.startTime = Date.now();
      this.log("", `🔔 ${this.name} 开始执行`);
    }
    
    log(...args) {
      const message = args.join(" ");
      this.logs.push(message);
      console.log(message);
    }
    
    getVal(key, defaultValue = "") {
      // 实际环境中这里会调用对应的持久化存储API
      if (typeof $persistentStore !== 'undefined') {
        return $persistentStore.read(key) || defaultValue;
      }
      if (typeof $prefs !== 'undefined') {
        return $prefs.valueForKey(key) || defaultValue;
      }
      return defaultValue;
    }
    
    setVal(value, key) {
      // 实际环境中这里会调用对应的持久化存储API
      if (typeof $persistentStore !== 'undefined') {
        return $persistentStore.write(value, key);
      }
      if (typeof $prefs !== 'undefined') {
        return $prefs.setValueForKey(value, key);
      }
      return true;
    }
    
    msg(title, subtitle, body) {
      if (typeof $notification !== 'undefined') {
        $notification.post(title, subtitle, body);
      }
    }
    
    async sleep(ms) {
      return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    done() {
      const cost = (Date.now() - this.startTime) / 1000;
      this.log("", `🔔 ${this.name} 执行完成 🕛 ${cost.toFixed(3)}秒`);
      if (typeof $done !== 'undefined') $done();
    }
    
    isRequest() {
      return typeof $request !== 'undefined';
    }
    
    isMatch(pattern) {
      return this.isRequest() && $request.url?.match(pattern);
    }
    
    formatDate(date, fmt) {
      const o = {
        "M+": date.getMonth() + 1,
        "d+": date.getDate(),
        "H+": date.getHours(),
        "m+": date.getMinutes(), 
        "s+": date.getSeconds(),
        "q+": Math.floor((date.getMonth() + 3) / 3),
        "S": date.getMilliseconds()
      };
      if (/(y+)/.test(fmt)) {
        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
      }
      for (const k in o) {
        if (new RegExp("(" + k + ")").test(fmt)) {
          fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        }
      }
      return fmt;
    }
    
    boxJsJsonBuilder(config, info) {
      // BoxJS配置构建逻辑
      this.log("📦 BoxJS配置已更新");
    }
    
    get isExecComm() {
      return false;
    }
    
    appendNotifyInfo(message) {
      this.log(message);
    }
    
    // HTTP请求方法
    http = {
      get: (options) => {
        return new Promise((resolve) => {
          if (typeof $httpClient !== 'undefined') {
            $httpClient.get(options, (error, response, body) => {
              resolve({ error, status: response?.status, body });
            });
          } else if (typeof $task !== 'undefined') {
            $task.fetch(options).then(response => {
              resolve({ error: null, status: response.statusCode, body: response.body });
            }, error => {
              resolve({ error, status: null, body: null });
            });
          } else {
            resolve({ error: "No HTTP client", status: null, body: null });
          }
        });
      },
      
      post: (options) => {
        return new Promise((resolve) => {
          if (typeof $httpClient !== 'undefined') {
            $httpClient.post(options, (error, response, body) => {
              resolve({ error, status: response?.status, body });
            });
          } else if (typeof $task !== 'undefined') {
            options.method = 'POST';
            $task.fetch(options).then(response => {
              resolve({ error: null, status: response.statusCode, body: response.body });
            }, error => {
              resolve({ error, status: null, body: null });
            });
          } else {
            resolve({ error: "No HTTP client", status: null, body: null });
          }
        });
      }
    };
  }(name, id, options);
}